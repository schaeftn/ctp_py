"""Simple travelling salesman problem on a circuit board."""
from __future__ import print_function

import sys


from scipy.sparse import csr_matrix
import numpy as np
from scipy.sparse.csgraph import minimum_spanning_tree
from scipy.sparse.csgraph._traversal import depth_first_order

np.set_printoptions(threshold=sys.maxsize)
np.set_printoptions(suppress=True)

def create_data_model():
    """Stores the data for the problem."""
    data = {}
    # Locations in block units
    data['distances'] = np.array(
        [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.14665699005127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.984672546386719,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 11.26511287689209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.51767921447754, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.736154556274414, 0.0,
          6.602588653564453, ],
         [0.0, 0.0, 0.0, 0.0, 0.0, 13.256964683532715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 40.29877853393555, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 11.26511287689209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.32226276397705, 0.0, 0.0, 0.0, 0.0,
          38.9993896484375, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 13.256964683532715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          9.531367301940918, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.847091674804688, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          22.899795532226562, 8.107245445251465],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.57923126220703,
          12.890389442443848, 0.0, 0.0],
         [14.14665699005127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.3858642578125, 0.0, 0.0,
          0.0, 0.0, 18.373865127563477, 0.0],
         [0.0, 0.0, 0.0, 0.0, 10.32226276397705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          18.780494689941406, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.847091674804688, 0.0, 0.0, 0.0, 0.0, 7.2918291091918945, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 25.51767921447754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2918291091918945, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 40.29877853393555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43.691043853759766,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.3858642578125, 0.0, 0.0, 0.0, 0.0, 0.0, 20.67482566833496, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 38.9993896484375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.67482566833496, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [10.984672546386719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43.691043853759766, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.57923126220703, 0.0, 18.780494689941406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 24.736154556274414, 0.0, 0.0, 9.531367301940918, 0.0, 12.890389442443848, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.899795532226562, 0.0, 18.373865127563477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0],
         [0.0, 0.0, 6.602588653564453, 0.0, 0.0, 0.0, 8.107245445251465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0]])
    # yapf: disable
    data['num_vehicles'] = 1
    data['depot'] = 30
    return data


def main():
    v = create_data_model()['distances']
    X = csr_matrix(v, dtype=float)
    Tcsr = minimum_spanning_tree(X)
    n, preds = depth_first_order(Tcsr, 0, directed=False, return_predecessors=False)
    print("""{ "nodes" : """)
    print(f"""{np.array2string(n.toarray().astype(float), precision=6, separator=", ", floatmode="fixed")}, """)
    print(""""preds" : """)
    print(f"""{np.array2string(preds.toarray().astype(float), precision=6, separator=", ", floatmode="fixed")}}}""")
    ##print(f"""{np.array2string(v, separator=", ")}""")




if __name__ == '__main__':
    main()